#!/usr/bin/env python
from __future__ import division
import argparse
import json
import os
import numpy as np
from phantomas.geometry.fiber import FiberSource
from phantomas.geometry.models import Fiber, IsotropicRegion
from phantomas.mr_simul.partial_volume \
    import (compute_affine_matrix,
            compute_spherical_region_masks,
            compute_fiber_masks,
            compute_volume_fractions)
from phantomas.mr_simul.image_formation \
    import (relaxation_time_images,
            mr_signal,
            rician_noise)
import nibabel as nib


# Function to check if file exists
def is_valid_file(parser, arg):
    if not os.path.exists(arg):
       parser.error("Cannot open file %s." % arg)
    else:
       return open(arg, 'r')


# The command-line arguments parser.
####################################
description="Simulates T1- and T2-weighted images from the description of a phantom."

parser = argparse.ArgumentParser(description=description)
parser.add_argument('--csf_vf', dest='csf_vf_fname',
                    help="input csf volume fraction map")
parser.add_argument('--wm_vf', dest='wm_vf_fname',
                    help="input white-matter volume fraction map")
parser.add_argument('--gm_vf', dest='gm_vf_fname',
                    help="input gray-matter volume fraction map")

parser.add_argument('-o', dest="output_dir", default=".",
                    help="Output directory.")
parser.add_argument('--res', type=float, default=1.0,
                    help="Structural (T1 and T2) images resolution in mm.")
parser.add_argument('--fov', type=float, default=None,
                    help="Field of view in mm. If None, adapts to the size "
                         "of the phantom.")
parser.add_argument('--snr', type=float, default=100.,
                    help="Signal-to-noise ratio of the simulated images. "
                         "0.0 for noise-free images")
parser.add_argument('--seed', type=int, default=None,
                     help="Seed for the random number generator.")
args = parser.parse_args()



print "Preparing T1- and T2-weighted images..."
###############################################
nii = nib.load(args.wm_vf_fname)
wm_vf = nii.get_data()

try:
    csf_vf = nib.load(args.csf_vf_fname).get_data()
except:
    csf_vf = np.zeros_like(wm_vf)
    pass

try:
    gm_vf = nib.load(args.gm_vf_fname).get_data()
except:
    gm_vf = np.zeros_like(wm_vf)
    pass

background_vf = np.ones_like( wm_vf ) - ( csf_vf + wm_vf + gm_vf )
background_vf[background_vf<0.0] = 0.0


print "\tPreparing relaxation time fields for each tissue."
# First initialize the random number generator - if seed provided
if args.seed is None:
    rng = np.random.RandomState(12345)
else:
    rng = np.random.RandomState(args.seed)

image_shape = background_vf.shape
wm_t1, wm_t2 = relaxation_time_images(image_shape, 'wm')
gm_t1, gm_t2 = relaxation_time_images(image_shape, 'gm')
csf_t1, csf_t2 = relaxation_time_images(image_shape, 'csf')


print "\tSimulate T1- and T2-weighted images"
short_te, long_te = 0.01, 0.09
short_tr, long_tr = 0.1, 5.0

t1_weighted = mr_signal(wm_vf, wm_t1, wm_t2,
              gm_vf, gm_t1, gm_t2,
              csf_vf, csf_t1, csf_t2,
              short_te, short_tr)

t2_weighted = mr_signal(wm_vf, wm_t1, wm_t2,
              gm_vf, gm_t1, gm_t2,
              csf_vf, csf_t1, csf_t2,
              long_te, long_tr)

if args.snr > 0.:
    print "\tCorrupt images by Rician noise"
    sigma = 1 / args.snr
    t1_weighted = rician_noise(t1_weighted, sigma)
    t2_weighted = rician_noise(t2_weighted, sigma)

print "\tChange image type to INT16"
scale = 2 ** 14
t1_weighted = np.asarray(scale * t1_weighted, dtype=np.int16)
t2_weighted = np.asarray(scale * t2_weighted, dtype=np.int16)


affine = nii.get_affine()
hdr = nii.get_header().copy()
hdr.set_xyzt_units('mm')
hdr.set_data_shape(t1_weighted.shape)
hdr.set_data_dtype(np.int16)
print "\tWrite images to disk"
t1_weighted_img = nib.Nifti1Image(t1_weighted, affine, hdr)
nib.save(t1_weighted_img, os.path.join(args.output_dir, "t1_weighted.nii.gz"))

t2_weighted_img = nib.Nifti1Image(t2_weighted, affine, hdr)
nib.save(t2_weighted_img, os.path.join(args.output_dir, "t2_weighted.nii.gz"))
